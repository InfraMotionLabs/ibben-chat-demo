"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_react-audio-voice-recorder_2_2_0_react-dom_18_3_1_react_-a3509f"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js ***!
  \************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: function() { return /* binding */ qe; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\nfunction re(o, f) {\n  for (var s = 0; s < f.length; s++) {\n    const p = f[s];\n    if (typeof p != \"string\" && !Array.isArray(p)) {\n      for (const c in p)\n        if (c !== \"default\" && !(c in o)) {\n          const l = Object.getOwnPropertyDescriptor(p, c);\n          l && Object.defineProperty(o, c, l.get ? l : {\n            enumerable: !0,\n            get: () => p[c]\n          });\n        }\n    }\n  }\n  return Object.freeze(Object.defineProperty(o, Symbol.toStringTag, { value: \"Module\" }));\n}\nfunction oe(o) {\n  return o && o.__esModule && Object.prototype.hasOwnProperty.call(o, \"default\") ? o.default : o;\n}\nfunction ne(o) {\n  if (o.__esModule)\n    return o;\n  var f = o.default;\n  if (typeof f == \"function\") {\n    var s = function p() {\n      if (this instanceof p) {\n        var c = [null];\n        c.push.apply(c, arguments);\n        var l = Function.bind.apply(f, c);\n        return new l();\n      }\n      return f.apply(this, arguments);\n    };\n    s.prototype = f.prototype;\n  } else\n    s = {};\n  return Object.defineProperty(s, \"__esModule\", { value: !0 }), Object.keys(o).forEach(function(p) {\n    var c = Object.getOwnPropertyDescriptor(o, p);\n    Object.defineProperty(s, p, c.get ? c : {\n      enumerable: !0,\n      get: function() {\n        return o[p];\n      }\n    });\n  }), s;\n}\nvar ie = { exports: {} };\n(function(o) {\n  var f = function(s) {\n    var p = Object.prototype, c = p.hasOwnProperty, l, j = typeof Symbol == \"function\" ? Symbol : {}, y = j.iterator || \"@@iterator\", m = j.asyncIterator || \"@@asyncIterator\", v = j.toStringTag || \"@@toStringTag\";\n    function w(t, e, r) {\n      return Object.defineProperty(t, e, {\n        value: r,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }), t[e];\n    }\n    try {\n      w({}, \"\");\n    } catch {\n      w = function(e, r, i) {\n        return e[r] = i;\n      };\n    }\n    function C(t, e, r, i) {\n      var n = e && e.prototype instanceof O ? e : O, d = Object.create(n.prototype), b = new u(i || []);\n      return d._invoke = V(t, r, b), d;\n    }\n    s.wrap = C;\n    function N(t, e, r) {\n      try {\n        return { type: \"normal\", arg: t.call(e, r) };\n      } catch (i) {\n        return { type: \"throw\", arg: i };\n      }\n    }\n    var _ = \"suspendedStart\", G = \"suspendedYield\", U = \"executing\", P = \"completed\", L = {};\n    function O() {\n    }\n    function T() {\n    }\n    function k() {\n    }\n    var D = {};\n    w(D, y, function() {\n      return this;\n    });\n    var B = Object.getPrototypeOf, M = B && B(B(h([])));\n    M && M !== p && c.call(M, y) && (D = M);\n    var $ = k.prototype = O.prototype = Object.create(D);\n    T.prototype = k, w($, \"constructor\", k), w(k, \"constructor\", T), T.displayName = w(\n      k,\n      v,\n      \"GeneratorFunction\"\n    );\n    function Y(t) {\n      [\"next\", \"throw\", \"return\"].forEach(function(e) {\n        w(t, e, function(r) {\n          return this._invoke(e, r);\n        });\n      });\n    }\n    s.isGeneratorFunction = function(t) {\n      var e = typeof t == \"function\" && t.constructor;\n      return e ? e === T || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (e.displayName || e.name) === \"GeneratorFunction\" : !1;\n    }, s.mark = function(t) {\n      return Object.setPrototypeOf ? Object.setPrototypeOf(t, k) : (t.__proto__ = k, w(t, v, \"GeneratorFunction\")), t.prototype = Object.create($), t;\n    }, s.awrap = function(t) {\n      return { __await: t };\n    };\n    function I(t, e) {\n      function r(d, b, F, S) {\n        var E = N(t[d], t, b);\n        if (E.type === \"throw\")\n          S(E.arg);\n        else {\n          var H = E.arg, z = H.value;\n          return z && typeof z == \"object\" && c.call(z, \"__await\") ? e.resolve(z.__await).then(function(R) {\n            r(\"next\", R, F, S);\n          }, function(R) {\n            r(\"throw\", R, F, S);\n          }) : e.resolve(z).then(function(R) {\n            H.value = R, F(H);\n          }, function(R) {\n            return r(\"throw\", R, F, S);\n          });\n        }\n      }\n      var i;\n      function n(d, b) {\n        function F() {\n          return new e(function(S, E) {\n            r(d, b, S, E);\n          });\n        }\n        return i = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        i ? i.then(\n          F,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          F\n        ) : F();\n      }\n      this._invoke = n;\n    }\n    Y(I.prototype), w(I.prototype, m, function() {\n      return this;\n    }), s.AsyncIterator = I, s.async = function(t, e, r, i, n) {\n      n === void 0 && (n = Promise);\n      var d = new I(\n        C(t, e, r, i),\n        n\n      );\n      return s.isGeneratorFunction(e) ? d : d.next().then(function(b) {\n        return b.done ? b.value : d.next();\n      });\n    };\n    function V(t, e, r) {\n      var i = _;\n      return function(d, b) {\n        if (i === U)\n          throw new Error(\"Generator is already running\");\n        if (i === P) {\n          if (d === \"throw\")\n            throw b;\n          return g();\n        }\n        for (r.method = d, r.arg = b; ; ) {\n          var F = r.delegate;\n          if (F) {\n            var S = q(F, r);\n            if (S) {\n              if (S === L)\n                continue;\n              return S;\n            }\n          }\n          if (r.method === \"next\")\n            r.sent = r._sent = r.arg;\n          else if (r.method === \"throw\") {\n            if (i === _)\n              throw i = P, r.arg;\n            r.dispatchException(r.arg);\n          } else\n            r.method === \"return\" && r.abrupt(\"return\", r.arg);\n          i = U;\n          var E = N(t, e, r);\n          if (E.type === \"normal\") {\n            if (i = r.done ? P : G, E.arg === L)\n              continue;\n            return {\n              value: E.arg,\n              done: r.done\n            };\n          } else\n            E.type === \"throw\" && (i = P, r.method = \"throw\", r.arg = E.arg);\n        }\n      };\n    }\n    function q(t, e) {\n      var r = t.iterator[e.method];\n      if (r === l) {\n        if (e.delegate = null, e.method === \"throw\") {\n          if (t.iterator.return && (e.method = \"return\", e.arg = l, q(t, e), e.method === \"throw\"))\n            return L;\n          e.method = \"throw\", e.arg = new TypeError(\n            \"The iterator does not provide a 'throw' method\"\n          );\n        }\n        return L;\n      }\n      var i = N(r, t.iterator, e.arg);\n      if (i.type === \"throw\")\n        return e.method = \"throw\", e.arg = i.arg, e.delegate = null, L;\n      var n = i.arg;\n      if (!n)\n        return e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, L;\n      if (n.done)\n        e[t.resultName] = n.value, e.next = t.nextLoc, e.method !== \"return\" && (e.method = \"next\", e.arg = l);\n      else\n        return n;\n      return e.delegate = null, L;\n    }\n    Y($), w($, v, \"Generator\"), w($, y, function() {\n      return this;\n    }), w($, \"toString\", function() {\n      return \"[object Generator]\";\n    });\n    function x(t) {\n      var e = { tryLoc: t[0] };\n      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function a(t) {\n      var e = t.completion || {};\n      e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function u(t) {\n      this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(x, this), this.reset(!0);\n    }\n    s.keys = function(t) {\n      var e = [];\n      for (var r in t)\n        e.push(r);\n      return e.reverse(), function i() {\n        for (; e.length; ) {\n          var n = e.pop();\n          if (n in t)\n            return i.value = n, i.done = !1, i;\n        }\n        return i.done = !0, i;\n      };\n    };\n    function h(t) {\n      if (t) {\n        var e = t[y];\n        if (e)\n          return e.call(t);\n        if (typeof t.next == \"function\")\n          return t;\n        if (!isNaN(t.length)) {\n          var r = -1, i = function n() {\n            for (; ++r < t.length; )\n              if (c.call(t, r))\n                return n.value = t[r], n.done = !1, n;\n            return n.value = l, n.done = !0, n;\n          };\n          return i.next = i;\n        }\n      }\n      return { next: g };\n    }\n    s.values = h;\n    function g() {\n      return { value: l, done: !0 };\n    }\n    return u.prototype = {\n      constructor: u,\n      reset: function(t) {\n        if (this.prev = 0, this.next = 0, this.sent = this._sent = l, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = l, this.tryEntries.forEach(a), !t)\n          for (var e in this)\n            e.charAt(0) === \"t\" && c.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = l);\n      },\n      stop: function() {\n        this.done = !0;\n        var t = this.tryEntries[0], e = t.completion;\n        if (e.type === \"throw\")\n          throw e.arg;\n        return this.rval;\n      },\n      dispatchException: function(t) {\n        if (this.done)\n          throw t;\n        var e = this;\n        function r(S, E) {\n          return d.type = \"throw\", d.arg = t, e.next = S, E && (e.method = \"next\", e.arg = l), !!E;\n        }\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var n = this.tryEntries[i], d = n.completion;\n          if (n.tryLoc === \"root\")\n            return r(\"end\");\n          if (n.tryLoc <= this.prev) {\n            var b = c.call(n, \"catchLoc\"), F = c.call(n, \"finallyLoc\");\n            if (b && F) {\n              if (this.prev < n.catchLoc)\n                return r(n.catchLoc, !0);\n              if (this.prev < n.finallyLoc)\n                return r(n.finallyLoc);\n            } else if (b) {\n              if (this.prev < n.catchLoc)\n                return r(n.catchLoc, !0);\n            } else if (F) {\n              if (this.prev < n.finallyLoc)\n                return r(n.finallyLoc);\n            } else\n              throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      },\n      abrupt: function(t, e) {\n        for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n          var i = this.tryEntries[r];\n          if (i.tryLoc <= this.prev && c.call(i, \"finallyLoc\") && this.prev < i.finallyLoc) {\n            var n = i;\n            break;\n          }\n        }\n        n && (t === \"break\" || t === \"continue\") && n.tryLoc <= e && e <= n.finallyLoc && (n = null);\n        var d = n ? n.completion : {};\n        return d.type = t, d.arg = e, n ? (this.method = \"next\", this.next = n.finallyLoc, L) : this.complete(d);\n      },\n      complete: function(t, e) {\n        if (t.type === \"throw\")\n          throw t.arg;\n        return t.type === \"break\" || t.type === \"continue\" ? this.next = t.arg : t.type === \"return\" ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : t.type === \"normal\" && e && (this.next = e), L;\n      },\n      finish: function(t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.finallyLoc === t)\n            return this.complete(r.completion, r.afterLoc), a(r), L;\n        }\n      },\n      catch: function(t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.tryLoc === t) {\n            var i = r.completion;\n            if (i.type === \"throw\") {\n              var n = i.arg;\n              a(r);\n            }\n            return n;\n          }\n        }\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function(t, e, r) {\n        return this.delegate = {\n          iterator: h(t),\n          resultName: e,\n          nextLoc: r\n        }, this.method === \"next\" && (this.arg = l), L;\n      }\n    }, s;\n  }(\n    // If this script is executing as a CommonJS module, use module.exports\n    // as the regeneratorRuntime namespace. Otherwise create a new empty\n    // object. Either way, the resulting object will be used to initialize\n    // the regeneratorRuntime variable at the top of this file.\n    o.exports\n  );\n  try {\n    regeneratorRuntime = f;\n  } catch {\n    typeof globalThis == \"object\" ? globalThis.regeneratorRuntime = f : Function(\"r\", \"regeneratorRuntime = r\")(f);\n  }\n})(ie);\nvar ae = {\n  defaultArgs: [\n    /* args[0] is always the binary path */\n    \"./ffmpeg\",\n    /* Disable interaction mode */\n    \"-nostdin\",\n    /* Force to override output file */\n    \"-y\"\n  ],\n  baseOptions: {\n    /* Flag to turn on/off log messages in console */\n    log: !1,\n    /*\n     * Custom logger to get ffmpeg.wasm output messages.\n     * a sample logger looks like this:\n     *\n     * ```\n     * logger = ({ type, message }) => {\n     *   console.log(type, message);\n     * }\n     * ```\n     *\n     * type can be one of following:\n     *\n     * info: internal workflow debug messages\n     * fferr: ffmpeg native stderr output\n     * ffout: ffmpeg native stdout output\n     */\n    logger: () => {\n    },\n    /*\n     * Progress handler to get current progress of ffmpeg command.\n     * a sample progress handler looks like this:\n     *\n     * ```\n     * progress = ({ ratio }) => {\n     *   console.log(ratio);\n     * }\n     * ```\n     *\n     * ratio is a float number between 0 to 1.\n     */\n    progress: () => {\n    },\n    /*\n     * Path to find/download ffmpeg.wasm-core,\n     * this value should be overwriten by `defaultOptions` in\n     * each environment.\n     */\n    corePath: \"\"\n  }\n}, se = (o, f) => {\n  const s = o._malloc(f.length * Uint32Array.BYTES_PER_ELEMENT);\n  return f.forEach((p, c) => {\n    const l = o.lengthBytesUTF8(p) + 1, j = o._malloc(l);\n    o.stringToUTF8(p, j, l), o.setValue(s + Uint32Array.BYTES_PER_ELEMENT * c, j, \"i32\");\n  }), [f.length, s];\n};\nconst fe = \"@ffmpeg/ffmpeg\", ce = \"0.11.6\", le = \"FFmpeg WebAssembly version\", pe = \"src/index.js\", ue = \"src/index.d.ts\", he = {\n  example: \"examples\"\n}, de = {\n  start: \"node scripts/server.js\",\n  \"start:worker\": \"node scripts/worker-server.js\",\n  build: \"rimraf dist && webpack --config scripts/webpack.config.prod.js\",\n  \"build:worker\": \"rimraf dist && webpack --config scripts/webpack.config.worker.prod.js\",\n  prepublishOnly: \"npm run build\",\n  lint: \"eslint src\",\n  wait: \"rimraf dist && wait-on http://localhost:3000/dist/ffmpeg.dev.js\",\n  test: \"npm-run-all -p -r start test:all\",\n  \"test:all\": \"npm-run-all wait test:browser:ffmpeg test:node:all\",\n  \"test:node\": \"node node_modules/mocha/bin/_mocha --exit --bail --require ./scripts/test-helper.js\",\n  \"test:node:all\": \"npm run test:node -- ./tests/*.test.js\",\n  \"test:browser\": \"mocha-headless-chrome -a allow-file-access-from-files -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000\",\n  \"test:browser:ffmpeg\": \"npm run test:browser -- -f ./tests/ffmpeg.test.html\"\n}, me = {\n  \"./src/node/index.js\": \"./src/browser/index.js\"\n}, ge = {\n  type: \"git\",\n  url: \"git+https://github.com/ffmpegwasm/ffmpeg.wasm.git\"\n}, we = [\n  \"ffmpeg\",\n  \"WebAssembly\",\n  \"video\"\n], ye = \"Jerome Wu <jeromewus@gmail.com>\", ve = \"MIT\", be = {\n  url: \"https://github.com/ffmpegwasm/ffmpeg.wasm/issues\"\n}, Fe = {\n  node: \">=12.16.1\"\n}, Ee = \"https://github.com/ffmpegwasm/ffmpeg.wasm#readme\", je = {\n  \"is-url\": \"^1.2.4\",\n  \"node-fetch\": \"^2.6.1\",\n  \"regenerator-runtime\": \"^0.13.7\",\n  \"resolve-url\": \"^0.2.1\"\n}, Le = {\n  \"@babel/core\": \"^7.12.3\",\n  \"@babel/preset-env\": \"^7.12.1\",\n  \"@ffmpeg/core\": \"^0.11.0\",\n  \"@types/emscripten\": \"^1.39.4\",\n  \"babel-eslint\": \"^10.1.0\",\n  \"babel-loader\": \"^8.1.0\",\n  chai: \"^4.2.0\",\n  cors: \"^2.8.5\",\n  eslint: \"^7.12.1\",\n  \"eslint-config-airbnb-base\": \"^14.1.0\",\n  \"eslint-plugin-import\": \"^2.22.1\",\n  express: \"^4.17.1\",\n  mocha: \"^8.2.1\",\n  \"mocha-headless-chrome\": \"^2.0.3\",\n  \"npm-run-all\": \"^4.1.5\",\n  \"wait-on\": \"^5.3.0\",\n  webpack: \"^5.3.2\",\n  \"webpack-cli\": \"^4.1.0\",\n  \"webpack-dev-middleware\": \"^4.0.0\"\n}, Q = {\n  name: fe,\n  version: ce,\n  description: le,\n  main: pe,\n  types: ue,\n  directories: he,\n  scripts: de,\n  browser: me,\n  repository: ge,\n  keywords: we,\n  author: ye,\n  license: ve,\n  bugs: be,\n  engines: Fe,\n  homepage: Ee,\n  dependencies: je,\n  devDependencies: Le\n}, Oe = typeof process < \"u\" && \"development\" === \"development\" ? new URL(\"/node_modules/@ffmpeg/core/dist/ffmpeg-core.js\", self.location).href : `https://unpkg.com/@ffmpeg/core@${Q.devDependencies[\"@ffmpeg/core\"].substring(1)}/dist/ffmpeg-core.js`, Se = { corePath: Oe };\nlet Z = !1, X = () => {\n};\nconst _e = (o) => {\n  Z = o;\n}, Pe = (o) => {\n  X = o;\n}, ke = (o, f) => {\n  X({ type: o, message: f }), Z && console.log(`[${o}] ${f}`);\n};\nvar A = {\n  logging: Z,\n  setLogging: _e,\n  setCustomLogger: Pe,\n  log: ke\n};\nconst $e = (o) => `\ncreateFFmpegCore is not defined. ffmpeg.wasm is unable to find createFFmpegCore after loading ffmpeg-core.js from ${o}. Use another URL when calling createFFmpeg():\n\nconst ffmpeg = createFFmpeg({\n  corePath: 'http://localhost:3000/ffmpeg-core.js',\n});\n`;\nvar K = {\n  CREATE_FFMPEG_CORE_IS_NOT_DEFINED: $e\n};\nconst W = async (o, f) => {\n  A.log(\"info\", `fetch ${o}`);\n  const s = await (await fetch(o)).arrayBuffer();\n  A.log(\"info\", `${o} file size = ${s.byteLength} bytes`);\n  const p = new Blob([s], { type: f }), c = URL.createObjectURL(p);\n  return A.log(\"info\", `${o} blob URL = ${c}`), c;\n}, Ce = async ({\n  corePath: o,\n  workerPath: f,\n  wasmPath: s\n}) => {\n  if (typeof WorkerGlobalScope < \"u\" && self instanceof WorkerGlobalScope) {\n    if (typeof o != \"string\")\n      throw Error(\"corePath should be a string!\");\n    const y = new URL(o, \"file:///Users/sznehan/Desktop/projects/ibben/node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js\").href, m = await W(\n      y,\n      \"application/javascript\"\n    ), v = await W(\n      s !== void 0 ? s : y.replace(\"ffmpeg-core.js\", \"ffmpeg-core.wasm\"),\n      \"application/wasm\"\n    ), w = await W(\n      f !== void 0 ? f : y.replace(\"ffmpeg-core.js\", \"ffmpeg-core.worker.js\"),\n      \"application/javascript\"\n    );\n    return typeof createFFmpegCore > \"u\" ? new Promise((C) => {\n      if (globalThis.importScripts(m), typeof createFFmpegCore > \"u\")\n        throw Error(K.CREATE_FFMPEG_CORE_IS_NOT_DEFINED(y));\n      A.log(\"info\", \"ffmpeg-core.js script loaded\"), C({\n        createFFmpegCore,\n        corePath: m,\n        wasmPath: v,\n        workerPath: w\n      });\n    }) : (A.log(\"info\", \"ffmpeg-core.js script is loaded already\"), Promise.resolve({\n      createFFmpegCore,\n      corePath: m,\n      wasmPath: v,\n      workerPath: w\n    }));\n  }\n  if (typeof o != \"string\")\n    throw Error(\"corePath should be a string!\");\n  const p = new URL(o, \"file:///Users/sznehan/Desktop/projects/ibben/node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js\").href, c = await W(\n    p,\n    \"application/javascript\"\n  ), l = await W(\n    s !== void 0 ? s : p.replace(\"ffmpeg-core.js\", \"ffmpeg-core.wasm\"),\n    \"application/wasm\"\n  ), j = await W(\n    f !== void 0 ? f : p.replace(\"ffmpeg-core.js\", \"ffmpeg-core.worker.js\"),\n    \"application/javascript\"\n  );\n  return typeof createFFmpegCore > \"u\" ? new Promise((y) => {\n    const m = document.createElement(\"script\"), v = () => {\n      if (m.removeEventListener(\"load\", v), typeof createFFmpegCore > \"u\")\n        throw Error(K.CREATE_FFMPEG_CORE_IS_NOT_DEFINED(p));\n      A.log(\"info\", \"ffmpeg-core.js script loaded\"), y({\n        createFFmpegCore,\n        corePath: c,\n        wasmPath: l,\n        workerPath: j\n      });\n    };\n    m.src = c, m.type = \"text/javascript\", m.addEventListener(\"load\", v), document.getElementsByTagName(\"head\")[0].appendChild(m);\n  }) : (A.log(\"info\", \"ffmpeg-core.js script is loaded already\"), Promise.resolve({\n    createFFmpegCore,\n    corePath: c,\n    wasmPath: l,\n    workerPath: j\n  }));\n}, Te = (o) => new Promise((f, s) => {\n  const p = new FileReader();\n  p.onload = () => {\n    f(p.result);\n  }, p.onerror = ({ target: { error: { code: c } } }) => {\n    s(Error(`File could not be read! Code=${c}`));\n  }, p.readAsArrayBuffer(o);\n}), Re = async (o) => {\n  let f = o;\n  return typeof o > \"u\" ? new Uint8Array() : (typeof o == \"string\" ? /data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(o) ? f = atob(o.split(\",\")[1]).split(\"\").map((s) => s.charCodeAt(0)) : f = await (await fetch(new URL(o, \"file:///Users/sznehan/Desktop/projects/ibben/node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js\").href)).arrayBuffer() : (o instanceof File || o instanceof Blob) && (f = await Te(o)), new Uint8Array(f));\n}, Ae = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  defaultOptions: Se,\n  fetchFile: Re,\n  getCreateFFmpegCore: Ce\n}, Symbol.toStringTag, { value: \"Module\" })), ee = /* @__PURE__ */ ne(Ae), { defaultArgs: Ne, baseOptions: Ge } = ae, Ue = se, { defaultOptions: De, getCreateFFmpegCore: Me } = ee, { version: Ie } = Q, J = Error(\"ffmpeg.wasm is not ready, make sure you have completed load().\");\nvar We = (o = {}) => {\n  const {\n    log: f,\n    logger: s,\n    progress: p,\n    ...c\n  } = {\n    ...Ge,\n    ...De,\n    ...o\n  };\n  let l = null, j = null, y = null, m = null, v = !1, w = () => {\n  }, C = f, N = p, _ = 0, G = 0, U = !1, P = 0;\n  const L = (a) => {\n    a === \"FFMPEG_END\" && y !== null && (y(), y = null, m = null, v = !1);\n  }, O = (a, u) => {\n    w({ type: a, message: u }), C && console.log(`[${a}] ${u}`);\n  }, T = (a) => {\n    const [u, h, g] = a.split(\":\");\n    return parseFloat(u) * 60 * 60 + parseFloat(h) * 60 + parseFloat(g);\n  }, k = (a, u) => {\n    if (typeof a == \"string\")\n      if (a.startsWith(\"  Duration\")) {\n        const h = a.split(\", \")[0].split(\": \")[1], g = T(h);\n        u({ duration: g, ratio: P }), (_ === 0 || _ > g) && (_ = g, U = !0);\n      } else if (U && a.startsWith(\"    Stream\")) {\n        const h = a.match(/([\\d.]+) fps/);\n        if (h) {\n          const g = parseFloat(h[1]);\n          G = _ * g;\n        } else\n          G = 0;\n        U = !1;\n      } else if (a.startsWith(\"frame\") || a.startsWith(\"size\")) {\n        const h = a.split(\"time=\")[1].split(\" \")[0], g = T(h), t = a.match(/frame=\\s*(\\d+)/);\n        if (G && t) {\n          const e = parseFloat(t[1]);\n          P = Math.min(e / G, 1);\n        } else\n          P = g / _;\n        u({ ratio: P, time: g });\n      } else\n        a.startsWith(\"video:\") && (u({ ratio: 1 }), _ = 0);\n  }, D = ({ type: a, message: u }) => {\n    O(a, u), k(u, N), L(u);\n  }, B = async () => {\n    if (O(\"info\", \"load ffmpeg-core\"), l === null) {\n      O(\"info\", \"loading ffmpeg-core\");\n      const {\n        createFFmpegCore: a,\n        corePath: u,\n        workerPath: h,\n        wasmPath: g\n      } = await Me(c);\n      l = await a({\n        /*\n         * Assign mainScriptUrlOrBlob fixes chrome extension web worker issue\n         * as there is no document.currentScript in the context of content_scripts\n         */\n        mainScriptUrlOrBlob: u,\n        printErr: (t) => D({ type: \"fferr\", message: t }),\n        print: (t) => D({ type: \"ffout\", message: t }),\n        /*\n         * locateFile overrides paths of files that is loaded by main script (ffmpeg-core.js).\n         * It is critical for browser environment and we override both wasm and worker paths\n         * as we are using blob URL instead of original URL to avoid cross origin issues.\n         */\n        locateFile: (t, e) => {\n          if (typeof window < \"u\" || typeof WorkerGlobalScope < \"u\") {\n            if (typeof g < \"u\" && t.endsWith(\"ffmpeg-core.wasm\"))\n              return g;\n            if (typeof h < \"u\" && t.endsWith(\"ffmpeg-core.worker.js\"))\n              return h;\n          }\n          return e + t;\n        }\n      }), j = l.cwrap(c.mainName || \"proxy_main\", \"number\", [\"number\", \"number\"]), O(\"info\", \"ffmpeg-core loaded\");\n    } else\n      throw Error(\"ffmpeg.wasm was loaded, you should not load it again, use ffmpeg.isLoaded() to check next time.\");\n  }, M = () => l !== null, $ = (...a) => {\n    if (O(\"info\", `run ffmpeg command: ${a.join(\" \")}`), l === null)\n      throw J;\n    if (v)\n      throw Error(\"ffmpeg.wasm can only run one command at a time\");\n    return v = !0, new Promise((u, h) => {\n      const g = [...Ne, ...a].filter((t) => t.length !== 0);\n      y = u, m = h, j(...Ue(l, g));\n    });\n  }, Y = (a, ...u) => {\n    if (O(\"info\", `run FS.${a} ${u.map((h) => typeof h == \"string\" ? h : `<${h.length} bytes binary file>`).join(\" \")}`), l === null)\n      throw J;\n    {\n      let h = null;\n      try {\n        h = l.FS[a](...u);\n      } catch {\n        throw Error(a === \"readdir\" ? `ffmpeg.FS('readdir', '${u[0]}') error. Check if the path exists, ex: ffmpeg.FS('readdir', '/')` : a === \"readFile\" ? `ffmpeg.FS('readFile', '${u[0]}') error. Check if the path exists` : \"Oops, something went wrong in FS operation.\");\n      }\n      return h;\n    }\n  }, I = () => {\n    if (l === null)\n      throw J;\n    m && m(\"ffmpeg has exited\"), v = !1;\n    try {\n      l.exit(1);\n    } catch (a) {\n      O(a.message), m && m(a);\n    } finally {\n      l = null, j = null, y = null, m = null;\n    }\n  }, V = (a) => {\n    N = a;\n  }, q = (a) => {\n    w = a;\n  }, x = (a) => {\n    C = a;\n  };\n  return O(\"info\", `use ffmpeg.wasm v${Ie}`), {\n    setProgress: V,\n    setLogger: q,\n    setLogging: x,\n    load: B,\n    isLoaded: M,\n    run: $,\n    exit: I,\n    FS: Y\n  };\n};\nconst Be = We, { fetchFile: ze } = ee;\nvar te = {\n  /*\n   * Create ffmpeg instance.\n   * Each ffmpeg instance owns an isolated MEMFS and works\n   * independently.\n   *\n   * For example:\n   *\n   * ```\n   * const ffmpeg = createFFmpeg({\n   *  log: true,\n   *  logger: () => {},\n   *  progress: () => {},\n   *  corePath: '',\n   * })\n   * ```\n   *\n   * For the usage of these four arguments, check config.js\n   *\n   */\n  createFFmpeg: Be,\n  /*\n   * Helper function for fetching files from various resource.\n   * Sometimes the video/audio file you want to process may located\n   * in a remote URL and somewhere in your local file system.\n   *\n   * This helper function helps you to fetch to file and return an\n   * Uint8Array variable for ffmpeg.wasm to consume.\n   *\n   */\n  fetchFile: ze\n};\nconst Ye = /* @__PURE__ */ oe(te), qe = /* @__PURE__ */ re({\n  __proto__: null,\n  default: Ye\n}, [te]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/react-audio-voice-recorder@2.2.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-audio-voice-recorder/dist/index-1c988149.js\n"));

/***/ })

}]);